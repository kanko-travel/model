use std::str::FromStr;
use uuid::Uuid;
use rust_decimal::Decimal;
use chrono::{DateTime, NaiveDate};
use lalrpop_util::ParseError;
use crate::filter::ast::{Expr, LogicOp, CompOp, Var};
use crate::filter::util::apply_string_escapes;
use crate::{FieldType, FieldValue, ModelDef};

grammar(model_def: &ModelDef);

Var: Var = {
    <name: VarName> "." <var: Var> => Var::Node((name, Box::new(var))),
    <name: VarName> => Var::Leaf(name)
};

VarName: String = <s:r"[a-zA-Z0-9]+(_[a-zA-Z0-9]+)*([a-zA-Z0-9]+(_[a-zA-Z0-9]+)*)*"> => s.into();

Val: Option<String> = {
	<s:r#""(\\\\|\\"|[^"\\])*""#> => apply_string_escapes(&s[1..s.len()-1]).into(),
	"null" => None,
	"true" => String::from("true").into(),
	"false" => String::from("false").into(),
}

Comp: Box<Expr> = {
	<var:Var> <op:CompOp> <val:Val> =>? {
		let def = var.resolve_definition(model_def).map_err(|_| ParseError::User {
			error: &format!("undefined field: {}", var.to_string())
		})?;

		let val: FieldValue = if let Some(val) = val {
			match &def.type_ {
				FieldType::Uuid => Uuid::parse_str(&val).map_err(|_| ParseError::User {
					error: "invalid uuid"
				})?.into(),
				FieldType::Bool => bool::from_str(&val).map_err(|_| ParseError::User {
					error: "invalid bool"
				})?.into(),
				FieldType::Int => i64::from_str(&val).map_err(|_| ParseError::User {
					error: "invalid int"
				})?.into(),
				FieldType::Int32 => i32::from_str(&val).map_err(|_| ParseError::User {
					error: "invalid int32"
				})?.into(),
				FieldType::Float => f64::from_str(&val).map_err(|_| ParseError::User {
					error: "invalid float"
				})?.into(),
				FieldType::Decimal => Decimal::from_str(&val).map_err(|_| ParseError::User {
					error: "invalid decimal"
				})?.into(),
				FieldType::String => val.into(),
				FieldType::Date => NaiveDate::parse_from_str(&val, "%Y-%m-%d").map_err(|_| ParseError::User {
					error: "invalid date"
				})?.into(),
				FieldType::DateTime => DateTime::parse_from_rfc3339(&val).map_err(|_| ParseError::User {
					error: "invalid datetime"
				})?.into(),
				FieldType::Enum(variants) => {
					match &op {
						CompOp::Eq => {
							variants.iter().find(|&v| v == &val).ok_or_else(|| ParseError::User {
								error: "invalid enum variant"
							})?;
						},
						_ => {}
					}

					FieldValue::Enum(val.to_string().into())
				},
				FieldType::Json => {
					return Err(ParseError::User {
						error: "illegal field: can't filter by json field"
					});
				}
			}
		} else {
			def.type_.null_value()
		};

        let var = Box::new(Expr::Var(var));
        let val = Box::new(Expr::Val(val));

		Ok(Box::new(Expr::Comp(var, op, val)))
	},
	"(" <Expr> ")",
};

CompOp: CompOp = {
	"="	=> CompOp::Eq,
	"!=" => CompOp::Neq,
	">" => CompOp::Gt,
	">=" => CompOp::Gte,
	"<"	=> CompOp::Lt,
	"<=" => CompOp::Lte,
	"LIKE" => CompOp::Like,
	"ILIKE" => CompOp::Ilike,
};

Negation: Box<Expr> = {
	NegationOp Negation => Box::new(Expr::Neg(<>)),
	Comp,
};

NegationOp: LogicOp = "!" => LogicOp::Not;

Conjunction: Box<Expr> = {
	Conjunction ConjunctionOp Negation => Box::new(Expr::Conj(<>)),
	Negation,
};

ConjunctionOp: LogicOp = "&&" => LogicOp::And;

pub Expr: Box<Expr> = {
	Expr ExprOp Conjunction => Box::new(Expr::Disj(<>)),
	Conjunction,
};

ExprOp: LogicOp = "||" => LogicOp::Or;